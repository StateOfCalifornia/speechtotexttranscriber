{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\speechtotextdb\\\\speechtotextdb\\\\src\\\\RecordButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordButton = ({\n  setText,\n  setHasResults,\n  language,\n  onRecordingComplete\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = language;\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        const audioURL = URL.createObjectURL(audioBlob);\n        onRecordingComplete(audioBlob, audioURL); // Callback to provide blob and URL\n      };\n\n      mediaRecorderRef.current.start();\n    });\n    recognition.onstart = () => {\n      setIsRecording(true);\n    };\n    recognition.onresult = async event => {\n      const originalText = event.results[0][0].transcript;\n      const response = await axios.post('http://localhost:5000/translate', {\n        text: originalText,\n        targetLanguage: language\n      });\n      const translatedText = response.data.translatedText;\n      setText(translatedText);\n      setHasResults(true);\n      setIsRecording(false); // Stop the recording state after getting result\n      mediaRecorderRef.current.stop(); // Stop the media recorder\n      recognition.stop();\n    };\n    recognition.onerror = () => {\n      setHasResults(false);\n      setIsRecording(false); // Stop recording state on error\n      if (mediaRecorderRef.current) {\n        mediaRecorderRef.current.stop();\n      }\n    };\n    recognition.start();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"button\",\n    onClick: startRecording,\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faMicrophone,\n      className: `microphone-icon ${isRecording ? 'blinking' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), \"Record\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(RecordButton, \"9vlr/drR7eRRS6Si05gDHrjPA2U=\");\n_c = RecordButton;\nexport default RecordButton;\nvar _c;\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"names":["React","useState","useRef","axios","FontAwesomeIcon","faMicrophone","jsxDEV","_jsxDEV","RecordButton","setText","setHasResults","language","onRecordingComplete","_s","isRecording","setIsRecording","mediaRecorderRef","audioChunksRef","startRecording","recognition","window","webkitSpeechRecognition","lang","navigator","mediaDevices","getUserMedia","audio","then","stream","current","MediaRecorder","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","audioURL","URL","createObjectURL","start","onstart","onresult","originalText","results","transcript","response","post","text","targetLanguage","translatedText","stop","onerror","className","onClick","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/repos/speechtotextdb/speechtotextdb/src/RecordButton.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RecordButton = ({ setText, setHasResults, language, onRecordingComplete }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n\r\n    const startRecording = async () => {\r\n        const recognition = new window.webkitSpeechRecognition();\r\n        recognition.lang = language;\r\n\r\n        navigator.mediaDevices.getUserMedia({ audio: true })\r\n            .then(stream => {\r\n                mediaRecorderRef.current = new MediaRecorder(stream);\r\n\r\n                mediaRecorderRef.current.ondataavailable = event => {\r\n                    audioChunksRef.current.push(event.data);\r\n                };\r\n\r\n                mediaRecorderRef.current.onstop = () => {\r\n                    const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n                    const audioURL = URL.createObjectURL(audioBlob);\r\n                    onRecordingComplete(audioBlob, audioURL); // Callback to provide blob and URL\r\n                };\r\n\r\n                mediaRecorderRef.current.start();\r\n            });\r\n\r\n        recognition.onstart = () => {\r\n            setIsRecording(true);\r\n        };\r\n\r\n        recognition.onresult = async (event) => {\r\n            const originalText = event.results[0][0].transcript;\r\n            const response = await axios.post('http://localhost:5000/translate', {\r\n                text: originalText,\r\n                targetLanguage: language\r\n            });\r\n\r\n            const translatedText = response.data.translatedText;\r\n            setText(translatedText);\r\n            setHasResults(true);\r\n            setIsRecording(false);  // Stop the recording state after getting result\r\n            mediaRecorderRef.current.stop();  // Stop the media recorder\r\n            recognition.stop();\r\n        };\r\n\r\n        recognition.onerror = () => {\r\n            setHasResults(false);\r\n            setIsRecording(false); // Stop recording state on error\r\n            if (mediaRecorderRef.current) {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button\" onClick={startRecording}>\r\n            <FontAwesomeIcon icon={faMicrophone} className={`microphone-icon ${isRecording ? 'blinking' : ''}`} />\r\n            Record\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default RecordButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}