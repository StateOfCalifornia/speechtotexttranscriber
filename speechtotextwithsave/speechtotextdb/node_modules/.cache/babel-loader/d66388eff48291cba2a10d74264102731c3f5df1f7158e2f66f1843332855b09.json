{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\speechtotextdb\\\\speechtotextdb\\\\src\\\\RecordingsList.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecordingsList({\n  recordings,\n  setRecordings,\n  fetchRecordings\n}) {\n  const deleteBlob = async blobName => {\n    try {\n      await axios.delete(`http://localhost:5000/delete-blob/${blobName}`);\n      setRecordings(prevRecordings => prevRecordings.filter(record => record.name !== blobName));\n      // Refresh the list after deleting\n      fetchRecordings();\n    } catch (error) {\n      console.error(\"Error deleting blob:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recordings-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), recordings.map(record => {\n      var _record$metadata;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Recording Name: \", record.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Translation: \", (_record$metadata = record.metadata) === null || _record$metadata === void 0 ? void 0 : _record$metadata.translation]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: record.audioContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteBlob(record.name),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)]\n      }, record.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n_c = RecordingsList;\nexport default RecordingsList;\nvar _c;\n$RefreshReg$(_c, \"RecordingsList\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","RecordingsList","recordings","setRecordings","fetchRecordings","deleteBlob","blobName","delete","prevRecordings","filter","record","name","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_record$metadata","metadata","translation","controls","src","audioContent","onClick","_c","$RefreshReg$"],"sources":["C:/repos/speechtotextdb/speechtotextdb/src/RecordingsList.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction RecordingsList({ recordings, setRecordings, fetchRecordings }) {\r\n    const deleteBlob = async (blobName) => {\r\n        try {\r\n            await axios.delete(`http://localhost:5000/delete-blob/${blobName}`);\r\n            setRecordings(prevRecordings => prevRecordings.filter(record => record.name !== blobName));\r\n            // Refresh the list after deleting\r\n            fetchRecordings();\r\n        } catch (error) {\r\n            console.error(\"Error deleting blob:\", error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"recordings-list\">\r\n            <h2>Recordings:</h2>\r\n            {recordings.map(record => (\r\n                <div key={record.name}>\r\n                    <div>Recording Name: {record.name}</div>\r\n                    <div>Translation: {record.metadata?.translation}</div>\r\n                    <audio controls src={record.audioContent}></audio> {/* Use the Base64 encoded audio data */}\r\n                    <button onClick={() => deleteBlob(record.name)}>Delete</button>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecordingsList;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAC;EAAEC,UAAU;EAAEC,aAAa;EAAEC;AAAgB,CAAC,EAAE;EACpE,MAAMC,UAAU,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACA,MAAMR,KAAK,CAACS,MAAM,CAAE,qCAAoCD,QAAS,EAAC,CAAC;MACnEH,aAAa,CAACK,cAAc,IAAIA,cAAc,CAACC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAKL,QAAQ,CAAC,CAAC;MAC1F;MACAF,eAAe,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAKc,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5Bf,OAAA;MAAAe,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBjB,UAAU,CAACkB,GAAG,CAACV,MAAM;MAAA,IAAAW,gBAAA;MAAA,oBAClBrB,OAAA;QAAAe,QAAA,gBACIf,OAAA;UAAAe,QAAA,GAAK,kBAAgB,EAACL,MAAM,CAACC,IAAI;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxCnB,OAAA;UAAAe,QAAA,GAAK,eAAa,GAAAM,gBAAA,GAACX,MAAM,CAACY,QAAQ,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,WAAW;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACtDnB,OAAA;UAAOwB,QAAQ;UAACC,GAAG,EAAEf,MAAM,CAACgB;QAAa;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,eACnDnB,OAAA;UAAQ2B,OAAO,EAAEA,CAAA,KAAMtB,UAAU,CAACK,MAAM,CAACC,IAAI,CAAE;UAAAI,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAJzDT,MAAM,CAACC,IAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CAAC;IAAA,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACS,EAAA,GAzBQ3B,cAAc;AA2BvB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}