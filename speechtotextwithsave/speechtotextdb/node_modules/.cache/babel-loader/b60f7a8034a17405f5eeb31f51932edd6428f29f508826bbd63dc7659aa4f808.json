{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\speechtotextdb\\\\speechtotextdb\\\\src\\\\RecordButton.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordButton = ({\n  setText,\n  setHasResults,\n  language\n}) => {\n  const startRecording = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = language;\n    recognition.onresult = async event => {\n      const originalText = event.results[0][0].transcript;\n\n      // Call the backend to get the translation\n      const response = await axios.post('http://localhost:5000/translate', {\n        text: originalText,\n        targetLanguage: language\n      });\n      const translatedText = response.data.translatedText;\n      setText(translatedText);\n      setHasResults(true);\n    };\n    recognition.onerror = () => {\n      setHasResults(false);\n    };\n    recognition.start();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"button\",\n    onClick: startRecording,\n    children: \"Record\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_c = RecordButton;\nexport default RecordButton;\nvar _c;\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","RecordButton","setText","setHasResults","language","startRecording","recognition","window","webkitSpeechRecognition","lang","onresult","event","originalText","results","transcript","response","post","text","targetLanguage","translatedText","data","onerror","start","type","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/repos/speechtotextdb/speechtotextdb/src/RecordButton.js"],"sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RecordButton = ({ setText, setHasResults, language }) => {\r\n    const startRecording = () => {\r\n        const recognition = new window.webkitSpeechRecognition();\r\n        recognition.lang = language; \r\n        \r\n        recognition.onresult = async (event) => {\r\n            const originalText = event.results[0][0].transcript;\r\n            \r\n            // Call the backend to get the translation\r\n            const response = await axios.post('http://localhost:5000/translate', {\r\n                text: originalText,\r\n                targetLanguage: language\r\n            });\r\n            \r\n            const translatedText = response.data.translatedText;\r\n            setText(translatedText);\r\n            setHasResults(true);\r\n        };\r\n\r\n        recognition.onerror = () => {\r\n            setHasResults(false);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button\" onClick={startRecording}>Record</button>\r\n    );\r\n};\r\n\r\nexport default RecordButton;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAC3D,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,uBAAuB,CAAC,CAAC;IACxDF,WAAW,CAACG,IAAI,GAAGL,QAAQ;IAE3BE,WAAW,CAACI,QAAQ,GAAG,MAAOC,KAAK,IAAK;MACpC,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;;MAEnD;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,iCAAiC,EAAE;QACjEC,IAAI,EAAEL,YAAY;QAClBM,cAAc,EAAEd;MACpB,CAAC,CAAC;MAEF,MAAMe,cAAc,GAAGJ,QAAQ,CAACK,IAAI,CAACD,cAAc;MACnDjB,OAAO,CAACiB,cAAc,CAAC;MACvBhB,aAAa,CAAC,IAAI,CAAC;IACvB,CAAC;IAEDG,WAAW,CAACe,OAAO,GAAG,MAAM;MACxBlB,aAAa,CAAC,KAAK,CAAC;IACxB,CAAC;IAEDG,WAAW,CAACgB,KAAK,CAAC,CAAC;EACvB,CAAC;EAED,oBACItB,OAAA;IAAQuB,IAAI,EAAC,QAAQ;IAACC,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAEpB,cAAe;IAAAqB,QAAA,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEzF,CAAC;AAACC,EAAA,GA7BI9B,YAAY;AA+BlB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}