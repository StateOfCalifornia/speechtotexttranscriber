{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\speechtotextdb\\\\speechtotextdb\\\\src\\\\RecordButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordButton = ({\n  setText,\n  setHasResults,\n  language\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const startRecording = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = language;\n    recognition.onstart = () => {\n      setIsRecording(true);\n    };\n    recognition.onresult = async event => {\n      const originalText = event.results[0][0].transcript;\n      const response = await axios.post('http://localhost:5000/translate', {\n        text: originalText,\n        targetLanguage: language\n      });\n      const translatedText = response.data.translatedText;\n      setText(translatedText);\n      setHasResults(true);\n      setIsRecording(false); // Stop recording state after getting result\n    };\n\n    recognition.onerror = () => {\n      setHasResults(false);\n      setIsRecording(false); // Stop recording state on error\n    };\n\n    recognition.start();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"button\",\n    onClick: startRecording,\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faMicrophone,\n      className: `microphone-icon ${isRecording ? 'blinking' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), \"Record\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(RecordButton, \"NOd79/f2BaY9QoyKdQLHCBEoQiE=\");\n_c = RecordButton;\nexport default RecordButton;\nvar _c;\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"names":["React","useState","axios","FontAwesomeIcon","faMicrophone","jsxDEV","_jsxDEV","RecordButton","setText","setHasResults","language","_s","isRecording","setIsRecording","startRecording","recognition","window","webkitSpeechRecognition","lang","onstart","onresult","event","originalText","results","transcript","response","post","text","targetLanguage","translatedText","data","onerror","start","type","className","onClick","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/repos/speechtotextdb/speechtotextdb/src/RecordButton.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RecordButton = ({ setText, setHasResults, language }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n\r\n    const startRecording = () => {\r\n        const recognition = new window.webkitSpeechRecognition();\r\n        recognition.lang = language; \r\n\r\n        recognition.onstart = () => {\r\n            setIsRecording(true);\r\n        };\r\n\r\n        recognition.onresult = async (event) => {\r\n            const originalText = event.results[0][0].transcript;\r\n\r\n            const response = await axios.post('http://localhost:5000/translate', {\r\n                text: originalText,\r\n                targetLanguage: language\r\n            });\r\n\r\n            const translatedText = response.data.translatedText;\r\n            setText(translatedText);\r\n            setHasResults(true);\r\n            setIsRecording(false); // Stop recording state after getting result\r\n        };\r\n\r\n        recognition.onerror = () => {\r\n            setHasResults(false);\r\n            setIsRecording(false); // Stop recording state on error\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button\" onClick={startRecording}>\r\n            <FontAwesomeIcon icon={faMicrophone} className={`microphone-icon ${isRecording ? 'blinking' : ''}`} />\r\n            Record\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default RecordButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,YAAY,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMa,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,uBAAuB,CAAC,CAAC;IACxDF,WAAW,CAACG,IAAI,GAAGR,QAAQ;IAE3BK,WAAW,CAACI,OAAO,GAAG,MAAM;MACxBN,cAAc,CAAC,IAAI,CAAC;IACxB,CAAC;IAEDE,WAAW,CAACK,QAAQ,GAAG,MAAOC,KAAK,IAAK;MACpC,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;MAEnD,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAAC,iCAAiC,EAAE;QACjEC,IAAI,EAAEL,YAAY;QAClBM,cAAc,EAAElB;MACpB,CAAC,CAAC;MAEF,MAAMmB,cAAc,GAAGJ,QAAQ,CAACK,IAAI,CAACD,cAAc;MACnDrB,OAAO,CAACqB,cAAc,CAAC;MACvBpB,aAAa,CAAC,IAAI,CAAC;MACnBI,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,CAAC;;IAEDE,WAAW,CAACgB,OAAO,GAAG,MAAM;MACxBtB,aAAa,CAAC,KAAK,CAAC;MACpBI,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,CAAC;;IAEDE,WAAW,CAACiB,KAAK,CAAC,CAAC;EACvB,CAAC;EAED,oBACI1B,OAAA;IAAQ2B,IAAI,EAAC,QAAQ;IAACC,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAErB,cAAe;IAAAsB,QAAA,gBAC7D9B,OAAA,CAACH,eAAe;MAACkC,IAAI,EAAEjC,YAAa;MAAC8B,SAAS,EAAG,mBAAkBtB,WAAW,GAAG,UAAU,GAAG,EAAG;IAAE;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,UAE1G;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEjB,CAAC;AAAC9B,EAAA,CAvCIJ,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}