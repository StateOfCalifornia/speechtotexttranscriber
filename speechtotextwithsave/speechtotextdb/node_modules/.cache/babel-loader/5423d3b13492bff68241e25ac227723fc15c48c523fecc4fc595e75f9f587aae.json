{"ast":null,"code":"var _jsxFileName = \"C:\\\\repos\\\\speechtotextdb\\\\speechtotextdb\\\\src\\\\RecordButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordButton = ({\n  setText,\n  setHasResults,\n  language,\n  setAudioBlob\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const recognition = useRef(null);\n  const mediaRecorder = useRef(null);\n  const recordedChunks = useRef([]);\n  const startRecording = () => {\n    if (isRecording) {\n      recognition.current && recognition.current.stop();\n      mediaRecorder.current && mediaRecorder.current.stop();\n      setIsRecording(false);\n      return;\n    }\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorder.current = new MediaRecorder(stream);\n      mediaRecorder.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          recordedChunks.current.push(event.data);\n        }\n      };\n      mediaRecorder.current.onstop = () => {\n        const audioBlob = new Blob(recordedChunks.current, {\n          type: 'audio/wav'\n        });\n        setAudioBlob(audioBlob);\n        recordedChunks.current = [];\n        stream.getTracks().forEach(track => track.stop()); // Stop tracks to release microphone\n      };\n\n      mediaRecorder.current.start();\n      recognition.current = new window.webkitSpeechRecognition();\n      recognition.current.lang = language;\n      recognition.current.onstart = () => {\n        setIsRecording(true);\n      };\n      recognition.current.onresult = async event => {\n        const originalText = event.results[0][0].transcript;\n        const response = await axios.post('http://localhost:5000/translate', {\n          text: originalText,\n          targetLanguage: language\n        });\n        const translatedText = response.data.translatedText;\n        setText(translatedText);\n        setHasResults(true);\n        recognition.current && recognition.current.stop(); // Stop the recognition once we have a result\n        mediaRecorder.current && mediaRecorder.current.stop(); // Stop media recording\n      };\n\n      recognition.current.onerror = () => {\n        setHasResults(false);\n      };\n      recognition.current.onend = () => {\n        setIsRecording(false); // Reset recording state after stopping recognition\n      };\n\n      recognition.current.start();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"button\",\n    onClick: startRecording,\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faMicrophone,\n      className: `microphone-icon ${isRecording ? 'blinking' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), \"Record\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(RecordButton, \"YqO3z0Ym992i8bC3Gu+RjfRvKDE=\");\n_c = RecordButton;\nexport default RecordButton;\nvar _c;\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"names":["React","useState","useRef","axios","FontAwesomeIcon","faMicrophone","jsxDEV","_jsxDEV","RecordButton","setText","setHasResults","language","setAudioBlob","_s","isRecording","setIsRecording","recognition","mediaRecorder","recordedChunks","startRecording","current","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","getTracks","forEach","track","start","window","webkitSpeechRecognition","lang","onstart","onresult","originalText","results","transcript","response","post","text","targetLanguage","translatedText","onerror","onend","className","onClick","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/repos/speechtotextdb/speechtotextdb/src/RecordButton.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst RecordButton = ({ setText, setHasResults, language, setAudioBlob }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const recognition = useRef(null);\r\n    const mediaRecorder = useRef(null);\r\n    const recordedChunks = useRef([]);\r\n\r\n    const startRecording = () => {\r\n        if (isRecording) {\r\n            recognition.current && recognition.current.stop(); \r\n            mediaRecorder.current && mediaRecorder.current.stop();\r\n            setIsRecording(false);\r\n            return;\r\n        }\r\n\r\n        navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\r\n            mediaRecorder.current = new MediaRecorder(stream);\r\n            mediaRecorder.current.ondataavailable = event => {\r\n                if (event.data.size > 0) {\r\n                    recordedChunks.current.push(event.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.current.onstop = () => {\r\n                const audioBlob = new Blob(recordedChunks.current, { type: 'audio/wav' });\r\n                setAudioBlob(audioBlob);\r\n                recordedChunks.current = [];\r\n                stream.getTracks().forEach(track => track.stop()); // Stop tracks to release microphone\r\n            };\r\n\r\n            mediaRecorder.current.start();\r\n\r\n            recognition.current = new window.webkitSpeechRecognition();\r\n            recognition.current.lang = language;\r\n\r\n            recognition.current.onstart = () => {\r\n                setIsRecording(true);\r\n            };\r\n\r\n            recognition.current.onresult = async (event) => {\r\n                const originalText = event.results[0][0].transcript;\r\n\r\n                const response = await axios.post('http://localhost:5000/translate', {\r\n                    text: originalText,\r\n                    targetLanguage: language\r\n                });\r\n\r\n                const translatedText = response.data.translatedText;\r\n                setText(translatedText);\r\n                setHasResults(true);\r\n\r\n                recognition.current && recognition.current.stop(); // Stop the recognition once we have a result\r\n                mediaRecorder.current && mediaRecorder.current.stop(); // Stop media recording\r\n            };\r\n\r\n            recognition.current.onerror = () => {\r\n                setHasResults(false);\r\n            };\r\n\r\n            recognition.current.onend = () => {\r\n                setIsRecording(false); // Reset recording state after stopping recognition\r\n            };\r\n\r\n            recognition.current.start();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <button type=\"button\" className=\"button\" onClick={startRecording}>\r\n            <FontAwesomeIcon icon={faMicrophone} className={`microphone-icon ${isRecording ? 'blinking' : ''}`} />\r\n            Record\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default RecordButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}